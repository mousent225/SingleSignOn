
<input type="hidden" id="hdfApplicationMasterName" value="@ViewBag.ApplicationMasterName" />
<div class="tb-table" style="float: right">
    <table>
        <tr>
            <th class="tb-col-1">
                @Html.Label("Detail", new { @class = "label", @style = "color: red;" })
            </th>
            <th class="input-require tb-col-2">
                @Html.Label("Reason for request", new { @class = "label" })
                <input type="hidden" id="hdfSystemId" value="0" />
            </th>
            <td class="tb-col-9">
                <input type="text" id="txtReasonForRequest" />
            </td>
        </tr>
        <tr>
            <td colspan="6">
                <div id="gridItEquipment">
                </div>
            </td>
        </tr>
    </table>
</div>
<div style="clear:both"></div>
<script type="text/javascript">

    var dataItEquipment = [];
    var repeatIndex = 0;
    var dataItEquipmentEntities = {};
    var statusEnable = false;
    $(document).ready(function () {

        $("#txtReasonForRequest").jqxInput({ height: 21, width: "99%", disabled: true });
        //set height modal
        $("#mdApprovalLine").height($('footer').position().top - 29);
        fnResize();
        
        fnLoadDataForEmailRequest();
    });
    //-------------------------------------------------------------------------------------------------------------------------------------------------------
    //Load data function-------------------------------------------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------------------------------------------------------------
    function fnLoadDataForEmailRequest() {
        $.ajax({
            type: "POST",
            url: "/Application/ItEquipmentDetail",
            data: JSON.stringify({ masterId: $("#hdfMasterId").val() }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: true,
            success: function (result) {
                dataItEquipment = result
                fnItEquipment();
            },
            error: function (mess) {
                console.log(mess);
            }
        });
    }

    function fnItEquipment() {

        var deleteColumnHeader = function (value) {
            return '<div style="text-align: center; position:absolute; left: 6px; z-index:999; font-weight:bold"><a href="javascript:;" onclick="fnDeleteRow(&#39;&#39;);"><i class="fa fa-trash" style="color:red"></i></a></div>';
            //return "<a href='javascript:;' onclick='fnDeleteRow(&#39;&#39;);'><i class='fa fa-trash' style='padding-left:8px; color:red'></i></a>";
        }

        var deleteColumn = function (row, column, value, defaultHtml, columnSettings, rowData) {
            return "<a href='javascript:;' onclick='fnDeleteRow(&#39;" + row + "&#39;);'><i class='fa fa-trash' style='padding:6px 0 0 11px; color:red'></i></a>";
        }

        source = {
            datatype: "json",
            datafields: [
                { name: 'ItemName', type: 'string' },
                { name: 'Quantity', type: 'int' },
                { name: 'Operator', type: 'string' },
                { name: 'Version', type: 'int' },
                { name: 'Remark', type: 'string' }
            ],
            localdata: dataItEquipment
        };
        var dataAdapter = new $.jqx.dataAdapter(source);
        $("#gridItEquipment").jqxGrid(
            {
                width: "100%",
                source: dataAdapter,
                selectionmode: 'multiplerowsextended',
                columnsresize: true,
                editable: statusEnable,
                columns: [
                    { text: 'No', dataField: 'RowIndex', width: 30, renderer: colHeaderCenter, cellsrenderer: rowIndex, editable: false },
                    { text: 'Item Name', dataField: 'ItemName', width: 200, renderer: colHeaderLeft, editable: true },
                    {
                        text: 'Quantity', dataField: 'Quantity', width: 100, columntype: 'numberinput', cellsalign: "right", renderer: colHeaderRight, editable: true,
                        validation: function (cell, value) {
                            if (value < 0) {
                                return { result: false, message: "Quantity should be in > 0" };
                            }
                            return true;
                        },
                        createeditor: function (row, cellvalue, editor) {
                            editor.jqxNumberInput({ decimalDigits: 0, digits: 3 });
                        }},
                    { text: 'Operator', dataField: 'Operator', width: 120, renderer: colHeaderLeft,hidden:true , editable: true },
                    { text: 'Version', dataField: 'Version', width: 150, renderer: colHeaderLeft, hidden: true, editable: true },
                    { text: 'Remark', dataField: 'Remark', renderer: colHeaderLeft, editable: true },
                    { text: '', dataField: 'Delete', width: 30, renderer: deleteColumnHeader, cellsrenderer: deleteColumn, editable: false, hidden: !statusEnable }
                ]
            });
        $("#gridItEquipment").on('cellendedit', function (event) {
            // event arguments.
            var args = event.args;
            // column data field.
            var dataField = event.args.datafield;
            // row's bound index.
            var rowBoundIndex = event.args.rowindex;
            // cell value
            var value = args.value;
            // cell old value.
            var oldvalue = args.oldvalue;
            // row's data.
            var rowData = args.row;
            //console.log(dataField);
            //console.log(dataItEquipment);
            switch (dataField) {
                case "ItemName":
                    dataItEquipment[rowBoundIndex].ItemName = value;
                    if (value !== "" && rowBoundIndex === dataItEquipment.length - 1) {
                        var item = { ItemName: "", Quantity: 0, Remark: "", Operator: "", Version: "" };
                        dataItEquipment.push(item);
                        fnItEquipment();
                    }
                    break;
                case "Quantity":
                    dataItEquipment[rowBoundIndex].Quantity = value;
                    break;
                case "Remark":
                    dataItEquipment[rowBoundIndex].Remark = value;
                    break;
                case "Operator":
                    dataItEquipment[rowBoundIndex].Operator = value;
                    break;
                case "Version":
                    dataItEquipment[rowBoundIndex].Version = value;
                    break;
                default:
            }
        });
    }

    function fnDeleteRow(index) {
        if (index === "") {
            if (confirmDeleteAll()) {
                dataItEquipment = [];
                var item = { ItemName: "", Quantity: 0, Remark: "", Operator: "", Version: "" };
                dataItEquipment.push(item);
                fnItEquipment();
            }
        } else {
            if (confirmDelete()) {
                dataItEquipment.splice(index, 1);
                if (dataItEquipment.length === 0) {
                    var item = { ItemName: "", Quantity: 0, Remark: "", Operator: "", Version: "" };
                    dataItEquipment.push(item);
                }
                fnItEquipment();
            }
        }
    }

    function fnResize() {
        $("#gridItEquipment").jqxGrid({ height: $("#divApplicationDetail").height() - 42 });
    }

    function fnGetDataApplicationDetail() {
        console.log(dataItEquipment);
        return dataItEquipment;
    }

    function fnSetupStatusForItEquipment(status) {
        statusEnable = status;
        $("#txtReasonForRequest").jqxInput({ disabled: !status });
        if (!status) {
            $("#gridItEquipment").jqxGrid({ editable: false });
            $("#gridItEquipment").jqxGrid("hidecolumn", "Delete");
        } else {
            var item = { ItemName: "", Quantity: 0, Remark: "", Operator: "", Version: "" };
            dataItEquipment.push(item);
            fnItEquipment();           
            $("#gridItEquipment").jqxGrid({ editable: true });
            $("#gridItEquipment").jqxGrid("showcolumn", "Delete");
        }
    }
</script>